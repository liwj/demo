<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
    	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
	<!-- 加载JDBC配置文件 -->
	<context:property-placeholder location="classpath:properties/jdbc.properties" />
	<!-- 配置c3p0 dataSource -->
	<beans:bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<beans:property name="driverClass" value="${driverClass}" />
		<beans:property name="jdbcUrl" value="${url}" />
		<beans:property name="user" value="${user}" />
		<beans:property name="password" value="${password}" />
	</beans:bean>
	<!-- jndi连接池 <beans:bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> 
		<beans:property name="jndiName" value="java:comp/env/jdbc/mysql"/> </beans:bean> -->

	<!-- mybatis sql session factory -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="mapperLocations"
			value="classpath:com/techlon/base/mappers/*.xml" />
	</beans:bean>
	<!-- mapper对应DAO -->
	<beans:bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<beans:property name="basePackage" value="com.techlon.base.dao" />
	</beans:bean>

	<!-- 事务配置 -->
	<tx:annotation-driven proxy-target-class="true"
		transaction-manager="transactionManager" />
	<beans:bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>
	<beans:bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<beans:property name="transactionManager" ref="transactionManager" />
		<beans:property name="transactionAttributes">
			<beans:props>
				<!-- PROPAGATION_SUPPORTS: 如果已经存在事务,则加入事务;如果没有事务,则以非事务的方式执行; PROPAGATION_MANDATORY: 
					使用当前事务, 如果没有, 则抛出异常; PROPAGATION_REQUIRED: 新建事务,如果当前有事务, 则挂起; PROPAGATION_NOT_SUPPORTED:以非事务的方式执行, 
					如果当前有事务, 则挂起; PROPAGATION_NEVER:以非事务的方式执行, 如果当前有事务,则抛出异常; +/-Exception + 
					表示异常出现时事物提交 - 表示异常出现时事务回滚 -->
				<beans:prop key="find*">PROPAGATION_REQUIRED,readOnly
				</beans:prop>
				<beans:prop key="get*">PROPAGATION_REQUIRED,readOnly
				</beans:prop>
				<beans:prop key="query*">PROPAGATION_REQUIRED,readOnly
				</beans:prop>
				<beans:prop key="select*">PROPAGATION_REQUIRED,readOnly
				</beans:prop>
				<beans:prop key="delete*">PROPAGATION_REQUIRED</beans:prop>
				<beans:prop key="del*">PROPAGATION_REQUIRED</beans:prop>
				<beans:prop key="remove*">PROPAGATION_REQUIRED</beans:prop>
				<beans:prop key="collect*">PROPAGATION_REQUIRED</beans:prop>
				<beans:prop key="save*">PROPAGATION_REQUIRED,-Exception
				</beans:prop>
				<beans:prop key="insert*">PROPAGATION_REQUIRED,-Exception
				</beans:prop>
				<beans:prop key="update*">PROPAGATION_REQUIRED,-Exception
				</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>

</beans:beans>